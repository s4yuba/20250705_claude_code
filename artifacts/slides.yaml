title: "【初学者向け】 今すぐできる！ Claude Codeの生産性を10倍上げるTips"
author: "Oikon"
date: "2025/07/05"
subtitle: "Claude Code 初学者 勉強会 2"

slides:
  - title: "Who are you?"
    content:
      - image: "fig/icon.jpg"
      - text: "Oikon"
      - text: "某外資IT企業, R&D, SW製品開発"
      - text: "エンジニア歴6年"
      - text: "趣味でツール弄りや個人開発してます"
      - text: "Claude Codeの発信多め（Zenn, 𝕏のハイライト）"
      - text: "𝕏:@gaishi_narou"
      - image: "fig/icon_qr.png"
      - image: "fig/zenn.png"

  - title: "Claude Code歴"
    content:
      - text: "- Anthropic推し"
      - text: "- Claude 3.5から使用（ちょうど１年くらい）"
      - text: "- Claude Codeは3月に初使用"
      - text: "- Maxプラン開放後愛用（5/1~）"
      - subtitle: "主な使い方:"
      - text: "- ツール作成"
      - text: "- OSSなどコード分析"
      - text: "- 趣味の開発"
      - text: "- LTスライド作成 (new)"

  - title: "今回話すこと"
    content:
      - subtitle: "対象: 初学者"
      - text: "Claude Codeを使ってみたい・使い始めた方"
      - subtitle: "話す内容"
      - text: "X の \"CLAUDE CODE 10x productivity workflow\" のアレンジ"
      - text: "1. IDE(VSCode, Cursor)統合"
      - text: "2. Planモード (Shift + Tab 2回)"
      - text: "3. CLAUDE.mdのメンテナンス"
      - text: "4. `/clear`によるコンテキストの浄化"
      - text: "5. `Think`の拡張"
      - text: "6. `permissions`の設定"
      - text: "7. 最新知識・ドキュメントのInput"
      - text: "8. Task (subagent) の活用"
      - text: "9. +α: Hooksの活用"
      - image: "fig/ss 2025-07-03 23.38.06.png"

  - title: "1: IDE（VSCode, Cursor）統合"
    content:
      - text: "Claude Codeユーザーの多くはIDE統合して使用"
      - subtitle: "メリット:"
      - text: "- 変更履歴が見やすい"
      - text: "- 慣れているエディタが使える"
      - text: "- Cursor, GitHub copilotとの併用"
      - text: "Claude CodeはCLIツールとしても活用できるが、まずはIDEで試すのがおすすめ"
      - text: "個人的には動作が軽いVSCodeを使用している"
      - image: "fig/ide.jpeg"

  - title: "2: Plan モード (Shift + Tab 2 回)"
    content:
      - text: "Claude Codeのタスク実行前にプラン立ててくれる"
      - subtitle: "メリット:"
      - text: "- いきなり実行しない"
      - text: "- 必要であればプラン修正可能"
      - text: "ワンショットのプロンプトエンジニアリングは手戻りも多い"
      - text: "コンテキストを大事にする観点でも Plan モードを実行推奨"
      - text: "（余談）settings.json で起動時のデフォルトを Plan モードにできる"
      - code: |
          {
              "permissions": {
                  "defaltMode": "plan" // "acceptEdits" | "bypassPermissions"
              }
          }
        language: "json"

  - title: "3: CLAUDE.md のメンテナンス"
    content:
      - text: "Claude Code 起動時に読み込まれるドキュメント"
      - text: "Claude Code の守って欲しいルールを記載する（強制力はないので注意）"
      - subtitle: "ポイント:"
      - text: "- プロジェクトの構造・機能を記載"
      - text: "- 定期的に更新する（`/init`でも可能）"
      - text: "- `#`で適宜新規の指示を追加"
      - text: "CLAUDE.mdは定期的にメンテナンスすることを推奨"

  - title: "4: `/clear`によるコンテキストの浄化"
    content:
      - text: "Claude Code が期待通りの動作をするためには、**コンテキストウィンドウ**（作業メモリ）をいかに大事にするかが重要。"
      - text: "コンテキストウィンドウ = 200K"
      - subtitle: "意識すること:"
      - text: "- 余計なコンテキストは入れない"
      - text: "- 具体的な指示。余計なファイルを読ませない"
      - text: "- 関係のないタスクは、別のセッションで行う"
      - text: "タスクが終了したら定期的に`/clear`をして、コンテキストウィンドウをクリーンにする"
      - text: "（個人的には`/compact`をあまり信用していない。必要ならドキュメントに起こしてもらう方がいい）"

  - title: "5: `Think`の拡張"
    content:
      - text: "Claude Code には思考トークン予算（Thinking Token Budget）が存在する"
      - table:
          headers: ["Language", "31999 tokens", "10,000 tokens", "4000 tokens"]
          rows:
            - ["English", "ultrathink, think harder", "megathink, think hard", "think"]
            - ["日本語", "深く考えて", "よく考えて", "考えて"]
      - text: "環境変数`MAX_THINKING_TOKENS`の変更可能。"
      - text: "常に`ultrathink`したい場合 -> 31999"
      - text: "settings.json (settings.local.json):"
      - code: |
          {
              "env": {
                  "MAX_THINKING_TOKENS": "31999" // 1024 ~ 200000
              }
          }
        language: "json"

  - title: "6: `permissions`の設定"
    content:
      - text: "`permissions`はsettings.jsonで設定"
      - text: "`allow`と`deny`をそれぞれ設定できる。"
      - text: "`allow`はClaude Codeを使用中に逐次追加できるので、`deny`の設定をしておくことを推奨"
      - text: "注意：必ず守ってくれるという過信は厳禁。`rm -fr`はすり抜ける報告もあり。"

  - title: "permissions設定例"
    content:
      - text: "settings.json (settings.local.json):"
      - code: |
          {
            "permissions": {
              "allow": [
              ],
              "deny": [
                "Bash(sudo:*)",
                "Bash(rm:*)",
                "Bash(rm -rf:*)",
                "Bash(git push:*)",
                "Bash(git commit:*)",
                "Bash(git reset:*)",
                "Bash(git rebase:*)",
                "Read(.env.*)",
                "Read(id_rsa)",
                "Read(id_ed25519)",
                "Read(**/*token*)",
                "Read(**/*key*)",
                "Write(.env*)",
                "Write(**/secrets/**)",
                "Bash(curl:*)",
                "Bash(wget:*)",
                "Bash(nc:*)",
                "Bash(npm uninstall:*)",
                "Bash(npm remove:*)",
                "Bash(psql:*)",
                "Bash(mysql:*)",
                "Bash(mongod:*)",
                "mcp__supabase__execute_sql"
              ]
            }
          }
        language: "json"

  - title: "7: 最新知識・ドキュメントのInput"
    content:
      - text: "LLMは最新の知識を持っていないため、追加で知識を与えてあげる必要がある"
      - subtitle: "知識を追加する方法："
      - text: "1. pdf, mdなどドキュメントを直接与える"
      - text: "2. 最新情報をWebSearchで検索してもらう"
      - text: "3. MCPサーバーを活用する（Context7, Brave-Searchなど）"
      - subtitle: "すぐに導入して使いやすいContext7"
      - text: "Context7：代表的なライブラリから最新情報を取得してくれる"
      - subtitle: "導入方法:"
      - code: "claude mcp add context7 -s project -- npx -y @upstash/context7-mcp"
        language: "sh"
      - text: "-s : スコープ（user, project, local）"

  - title: "8: Task (subagent) の活用"
    content:
      - text: "Claude Codeの**Task**はSubagentが実行している"
      - text: "- 軽量"
      - text: "- 並列起動可能"
      - text: "- 親agentで使用可能なツールを使える"
      - text: "- subagentは独自のContext Windowを持つ"
      - text: "- 単独のタスクで動作し完了すると解放される"
      - text: "単発タスクは積極的にSubagentに任せることがおすすめ"
      - image: "fig/subagents.png"

  - title: "+α: Hooks の活用"
    content:
      - text: "7月1日に追加された新機能！"
      - text: "Claude Codeのアクションを検知して、事前に決められた動作を、指定のタイミングで行う機能。"
      - subtitle: "導入のメリット:"
      - text: "- 必ず実行してくれる（=ルールを守らせる）"
      - text: "- コンテキストサイズの縮小"
      - text: "- 拡張性の向上"
      - subtitle: "すぐ導入できる例："
      - code: "afplay /System/Library/Sounds/Sosumi.aiff"
        language: "sh"
      - image: "fig/hooks.png"

  - title: "さらに使いこなすためのキーワードたち"
    content:
      - text: "- Slash Command"
      - text: "- カスタム Slash Command"
      - text: "- MCP サーバーの追加: Figma, Playwright, Context7, etc."
      - text: "- Slash Command"
      - text: "- カスタム Slash Command"
      - text: "- MCP サーバーの追加: Figma, Playwright, Context7, etc."
      - text: "- [Git Worktree] (https://docs.anthropic.com/en/docs/claude-code/common-workflows#run-parallel-claude-code-sessions-with-git-worktrees)"
      - text: "- `--dengerously-skip-permissions`"
      - text: "- CodeRabbit + `/pr-comments`"
      - text: "- 音声入力（Aqua Voice）"
      - text: "- 著名なエンジニアによるコンテキストの明示（t_wada, Kent Beck, Fowler...）"
      - text: "- [ccusage](https://zenn.dev/ryoppippi/articles/6c9a8fe6629cd6)"

  - title: "おすすめ資料"
    content:
      - text: "- Anthropic - Claude の紹介: https://docs.anthropic.com/ja/docs/welcome"
      - text: "- Anthropic - Claude Code: Best practices for agentic coding: https://www.anthropic.com/engineering/claude-code-best-practices"
      - text: "- spiess.dev - How I Use Claude Code: https://spiess.dev/blog/how-i-use-claude-code"
      - text: "- Claude Code: Best Practices and Pro Tips: https://htdocs.dev/posts/claude-code-best-practices-and-pro-tips/"
      - text: "- ClaudeLog: https://claudelog.com/"
      - text: "- Claude Code を初めて使う人向けの実践ガイド: https://zenn.dev/hokuto_tech/articles/86d1edb33da61a"
      - text: "- Claude Code 逆引きコマンド事典: https://zenn.dev/ml_bear/articles/84e92429698177"
      - text: "- claude_code_deep_dive: https://www.youtube.com/live/HqXg2vfGX3c"
      - text: "- Claude Code にコマンド一発で MCP サーバを簡単設定: https://zenn.dev/karaage0703/articles/3bd2957807f311"
      - text: "- [awesome-claude-code](https://github.com/hesreallyhim/awesome-claude-code)"